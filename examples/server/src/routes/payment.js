const { checkToken, checkTokenMiddleWare } = require('./auth');

/**
 * @swagger
 * components:
 *   schemas:
 *     orderBase:
 *       type: object
 *       properties:
 *         out_order_id:
 *           type: string
 *           description: "an arbitrary ID generated by the app"
 *           example: "15QHSnYBtBMlXn2JGHghvc35M7BD38KhyR"
 *           required: true
 *         coin_type:
 *           type: string
 *           description: "'BSV' | 'BCH' | 'ETH'"
 *           required: true
 *           example: 'BSV'
 *         to:
 *           type: object
 *           required: true
 *           properties:
 *             id:
 *               type: string
 *               required: true
 *               description: "an arbitrary ID generated by the app"
 *               example: "15QHSnYBtBMlXn2JGHghvc35M7BD38KhyR"
 *             name:
 *               type: string
 *               required: true
 *               example: "a product"
 *             detail:
 *               type: string
 *         badge_code:
 *           type: string
 *           required: false
 *         subject:
 *           type: string
 *           required: false
 *         notify_url:
 *           type: string
 *           required: false
 *     order:
 *       allOf:
 *         - type: object
 *           properties:
 *             redirect_uri:
 *               type: string
 *               description: Where to redirect the user after payment.
 *               example: http://your-app.com
 *             expires:
 *               type: integer
 *               description: when the order should expire (must be paid before).
 *               example: 0
 *             server_token:
 *               type: string
 *               required: true
 *               example: test_token
 *         - $ref: '#/components/schemas/orderBase'
 *     autoPayOrder:
 *       allOf:
 *         - type: object
 *           properties:
 *             user_id:
 *               type: string
 *               description: The user who is making the payment.
 *               example: "15QHSnYBtBMlXn2JGHghvc35M7BD38KhyR"
 *               required: true
 *             server_token:
 *               type: string
 *               required: true
 *               example: test_token
 *         - $ref: '#/components/schemas/orderBase'
 *
 */

/**
 * @swagger
 * /create-order:
 *   post:
 *     summary: Creates an order_id from a valid order object.
 *     description: "On completion, use the order_id to redirect the user to complete the payment."
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/order'
 *     responses:
 *       200:
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 order_id:
 *                   type: string
 *                   description: The order_id
 *                 error:
 *                   type: string
 */
const createOrder = (app, dotwallet) =>
  app.post('/create-order', checkTokenMiddleWare, async (req, res) => {
    const order = { ...req.body };

    const orderIDCall = await dotwallet.getOrderID(order, true);
    if (orderIDCall.error) res.json(JSON.stringify(orderIDCall));
    else {
      // optional, check the order status:
      setTimeout(async () => {
        const orderStatus = await dotwallet.getOrderStatus(orderIDCall, true);
        // console.log('orderStatus', orderStatus);
        // optional, check the blockchain transaction
        const tx = await dotwallet.queryTx(orderStatus.txid, true);
        // console.log('tx', tx);
      }, 1000 * 60);

      res.json({ order_id: orderIDCall });
    }
  });

const paymentResult = (app) =>
  app.post('/payment-result', (req, res) => {
    // the response from 'notice_uri' will be in the request queries
    console.log('==============payment-result req==============\n', req.body);
    res.json({ code: 1 });
  });

/**
 * @swagger
 * /autopay:
 *   post:
 *     summary: processes an automatic payment.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/autoPayOrder'
 *     responses:
 *       200:
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                 order_id:
 *                   type: string
 *                 out_order_id:
 *                   type: string
 *                 user_id:
 *                   type: string
 *                 amount:
 *                   type: string
 *                 fee:
 *                   type: string
 *                 txid:
 *                   type: string
 */
const autoPay = (app, dotwallet) =>
  app.post('/autopay', checkTokenMiddleWare, async (req, res) => {
    // console.log({ body: req.body });
    const userID = req.body.user_id;
    // check to make sure user is same as payer user. This can prevent 3rd party attackers making autopayments on another user's behalf
    const tokenUserID = checkToken(req.body.server_token);
    if (tokenUserID !== userID) {
      res.json({ error: 'error processing transaction' });
      return;
    }
    // optional, check to make sure balance is enough
    // const balance = await dotwallet.getAutoPayBalance(userID);
    // console.log('balance', balance);
    const orderResultData = await dotwallet.autoPay(req.body, true);
    // console.log('orderResultData', orderResultData);
    res.json(orderResultData);
  });

module.exports = { autoPay, createOrder, paymentResult };
